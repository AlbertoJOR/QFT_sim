$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module  $end
  $var wire 8 # A [7:0] $end
  $var wire 8 $ B [7:0] $end
  $var wire 9 % X [8:0] $end
  $scope module adder_doble $end
   $var wire 8 & A [7:0] $end
   $var wire 8 ' B [7:0] $end
   $var wire 9 ( X [8:0] $end
   $var wire 5 ) X1_o [4:0] $end
   $var wire 5 * X2_o [4:0] $end
   $scope module adder_1 $end
    $var wire 32 3 DATA_W [31:0] $end
    $var wire 4 + A [3:0] $end
    $var wire 4 , B [3:0] $end
    $var wire 1 - Carry $end
    $var wire 5 . X [4:0] $end
   $upscope $end
   $scope module adder_2 $end
    $var wire 32 3 DATA_W [31:0] $end
    $var wire 4 / A [3:0] $end
    $var wire 4 0 B [3:0] $end
    $var wire 1 1 Carry $end
    $var wire 5 2 X [4:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000101 #
b00001010 $
b000001111 %
b00000101 &
b00001010 '
b000001111 (
b01111 )
b00000 *
b0101 +
b1010 ,
0-
b01111 .
b0000 /
b0000 0
01
b00000 2
b00000000000000000000000000000100 3
#2000
#2001
b11111101 #
b10100111 $
b110100100 %
b11111101 &
b10100111 '
b110100100 (
b10100 )
b11010 *
b1101 +
b0111 ,
b10100 .
b1111 /
b1010 0
11
b11010 2
#4001
b10001101 #
b100110100 %
b10001101 &
b100110100 (
b10011 *
b1000 /
b10011 2
#6001
b10111101 #
b10000110 $
b101000011 %
b10111101 &
b10000110 '
b101000011 (
b10011 )
b10100 *
b0110 ,
b10011 .
b1011 /
b1000 0
b10100 2
#8001
b10011001 #
b11011001 $
b101110010 %
b10011001 &
b11011001 '
b101110010 (
b10010 )
b10111 *
b1001 +
b1001 ,
b10010 .
b1001 /
b1101 0
b10111 2
#10001
b10000011 #
b10111000 $
b100111011 %
b10000011 &
b10111000 '
b100111011 (
b01011 )
b10011 *
b0011 +
b1000 ,
b01011 .
b1000 /
b1011 0
01
b10011 2
#12001
b01111110 #
b01010110 $
b011010100 %
b01111110 &
b01010110 '
b011010100 (
b10100 )
b01101 *
b1110 +
b0110 ,
b10100 .
b0111 /
b0101 0
11
b01101 2
#14001
b10110000 #
b00010100 $
b011000100 %
b10110000 &
b00010100 '
b011000100 (
b00100 )
b01100 *
b0000 +
b0100 ,
b00100 .
b1011 /
b0001 0
01
b01100 2
#16001
b00111011 #
b00011011 $
b001010110 %
b00111011 &
b00011011 '
b001010110 (
b10110 )
b00101 *
b1011 +
b1011 ,
b10110 .
b0011 /
11
b00101 2
#18001
b01100111 #
b10100101 $
b100001100 %
b01100111 &
b10100101 '
b100001100 (
b01100 )
b10000 *
b0111 +
b0101 ,
b01100 .
b0110 /
b1010 0
01
b10000 2
#20001
b10000000 #
b00110110 $
b010110110 %
b10000000 &
b00110110 '
b010110110 (
b00110 )
b01011 *
b0000 +
b0110 ,
b00110 .
b1000 /
b0011 0
b01011 2
#22001
#22002
